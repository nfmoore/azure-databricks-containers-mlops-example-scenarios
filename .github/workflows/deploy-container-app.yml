name: Deploy Container App

on:
  workflow_dispatch:

env:
  AZ_CLI_VERSION: 2.59.0
  CONTAINER_IMAGE_NAME: credit-default-api
  GITHUB_RUN_ID: ${{ github.run_id }}
  DEPLOYMENT_RESOURCE_GROUP_NAME: ${{ vars.DEPLOYMENT_RESOURCE_GROUP_NAME }}

permissions:
  id-token: write
  contents: read

jobs:
  train:
    name: Train Model
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout repo
        uses: actions/checkout@v4

        # Authenticate to Az CLI using OIDC
      - name: Azure CLI login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Add Databricks Azure CLI extension
      - name: Add Databricks extension
        uses: azure/cli@v2
        with:
          azcliversion: ${{ env.AZ_CLI_VERSION }}
          inlineScript: |
            # Add databricks extension
            az extension add --name databricks

        # Set Databricks host and token environment variables and  MLFlow tracking URI
      - name: Set Databricks environment variables
        uses: azure/cli@v2
        with:
          azcliversion: ${{ env.AZ_CLI_VERSION }}
          inlineScript: |
            DATABRICKS_WORKSPACE_NAME=$(az resource list --resource-group $DEPLOYMENT_RESOURCE_GROUP_NAME \
              | jq '.[] | select(.type == "Microsoft.Databricks/workspaces") | .name' -r)

            echo "DATABRICKS_HOST=https://$(az databricks workspace show --name $DATABRICKS_WORKSPACE_NAME \
              --resource-group $DEPLOYMENT_RESOURCE_GROUP_NAME | jq '.workspaceUrl' -r)" >> $GITHUB_ENV
              
            echo "DATABRICKS_TOKEN=$(az account get-access-token \
              --resource 2ff814a6-3304-4ab8-85cb-cd0e6f879c1d | jq .accessToken -r)" >> $GITHUB_ENV

            echo "MLFLOW_TRACKING_URI=databricks" >> $GITHUB_ENV

      # Add host to databricks.yml
      - name: Add databricks host
        run: |
          yq -i '.workspace.host = "'"${DATABRICKS_HOST}"'"' databricks/databricks.yml
          cat databricks/databricks.yml

      # Install the Databricks CLI
      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

      # Configure the Databricks CLI
      - name: Databricks CLI config
        run: |
          cat > ~/.databrickscfg << EOF 
          [DEFAULT] 
          host = $DATABRICKS_HOST
          token = $DATABRICKS_TOKEN
          EOF

      # Deploy Databricks Bundle
      - name: Deploy bundle
        working-directory: databricks
        run: |
          databricks bundle validate 
          databricks bundle deploy

      # Run train model workflow
      - name: Run workflow
        working-directory: databricks
        run: |
          # Create artifacts directory
          mkdir artifacts

          # Run train model workflow
          databricks bundle run train_register_model_job > artifacts/workflow-output.json

          # Display workflow output
          cat artifacts/workflow-output.json

      # Upload output from workflow run
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: artifacts

  # containerize:
  #   name: Build Container
  #   runs-on: ubuntu-latest
  #   needs: [train]
  #   steps:
  #     # Checkout the repository to the GitHub Actions runner
  #     - name: Checkout repo
  #       uses: actions/checkout@v4

  #     # Download output from deployment
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: artifacts

  #     # Authenticate to Az CLI using OIDC
  #     - name: Azure CLI login
  #       uses: azure/login@v2
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #     # Set artifact model environment variables
  #     - name: Set model variables
  #       run: |
  #         MODEL_URI=$(jq \
  #           '.task_outputs | map(select(.TaskKey | contains("register_model"))) | .[0].Output.result' \
  #           artifacts/workflow-output.json -r)

  #         echo "MODEL_NAME=$($(echo $MODEL_URI | cut -d'/' -f2))" >> $GITHUB_ENV
  #         echo "MODEL_VERSION=$($(echo $MODEL_URI | cut -d'/' -f3))" >> $GITHUB_ENV

  #     # Download model artifact
  #     - name: Download model
  #       run: |
  #         # Get model artifact uri
  #         curl -X GET "$DATABRICKS_HOST/api/2.0/preview/mlflow/model-versions/get-download-uri" \
  #           -H "Authorization: Bearer ${DATABRICKS_TOKEN}" \
  #           -d '{"name": "'"${MODEL_NAME}"'", "version": "'"${MODEL_VERSION}"'"}' > download-uri.json

  #         # Display download-uri.json
  #         cat download-uri.json

  #         # Set model artifact uri
  #         MODEL_ARTIFACT_URI=$(jq ".artifact_uri" download-uri.json -r)

  #         # Download model artifacts from databricks
  #         mlflow artifacts download --artifact-uri $MODEL_ARTIFACT_URI --dst-path ./app/

  #         # Create artifacts directory
  #         mkdir artifacts

  #         # Copy model to artifacts directory
  #         cp ./app/model artifacts/model

  #     # Build and push container image to ACR
  #     - name: Build and push container image
  #       run: |
  #         # Get container registry name
  #         CONTAINER_REGISTRY_NAME=$(az resource list --resource-group $DEPLOYMENT_RESOURCE_GROUP_NAME \
  #                       | jq '.[] | select(.type == "Microsoft.ContainerRegistry/registries") | .name' -r)

  #                       # Log in to ACR
  #         az acr login --name $CONTAINER_REGISTRY_NAME

  #         # Build container image
  #         az acr build --image $CONTAINER_IMAGE_NAME:$GITHUB_RUN_ID --registry $CONTAINER_REGISTRY_NAME ./app

  #     # Upload model from workflow run
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: artifacts
  #         path: artifacts
