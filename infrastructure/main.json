{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.13.1.58284",
      "templateHash": "18065729359224622542"
    }
  },
  "parameters": {
    "resourceLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Resource Location"
      }
    },
    "vNetIPAddressPrefixesForFirstDeployment": {
      "type": "array",
      "defaultValue": [
        "192.168.0.0/16"
      ],
      "metadata": {
        "description": "Virtual Network IP Address Prefixes"
      }
    },
    "subnetAksIpAddressPrefixForFirstDeployment": {
      "type": "string",
      "defaultValue": "192.168.0.0/24",
      "metadata": {
        "description": "AKS Subnet IP Address Prefix"
      }
    },
    "subnetAppGwIpAddressPrefixForFirstDeployment": {
      "type": "string",
      "defaultValue": "192.168.1.0/24",
      "metadata": {
        "description": "App Gateway IP Address Prefix"
      }
    },
    "vNetIPAddressPrefixesForSecondDeployment": {
      "type": "array",
      "defaultValue": [
        "192.167.0.0/16"
      ],
      "metadata": {
        "description": "Virtual Network IP Address Prefixes"
      }
    },
    "subnetAksIpAddressPrefixForSecondDeployment": {
      "type": "string",
      "defaultValue": "192.167.0.0/24",
      "metadata": {
        "description": "AKS Subnet IP Address Prefix"
      }
    },
    "subnetAppGwIpAddressPrefixForSecondDeployment": {
      "type": "string",
      "defaultValue": "192.167.1.0/24",
      "metadata": {
        "description": "App Gateway IP Address Prefix"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "m_databricks",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceInstance": {
            "value": "01"
          },
          "location": {
            "value": "[parameters('resourceLocation')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "6605471823497372116"
            }
          },
          "parameters": {
            "workloadIdentifier": {
              "type": "string",
              "defaultValue": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
              "metadata": {
                "description": "Workload Identifier"
              }
            },
            "resourceInstance": {
              "type": "string",
              "defaultValue": "001",
              "metadata": {
                "description": "Resource Instance"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Resource Location"
              }
            },
            "databricksWorkspaceName": {
              "type": "string",
              "defaultValue": "[format('dbw{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "Databricks Workspace Name"
              }
            },
            "databricksManagedResourceGroupName": {
              "type": "string",
              "defaultValue": "[format('{0}-dbw-mngd', resourceGroup().name)]",
              "metadata": {
                "description": "Databricks Managed Resource Group Name"
              }
            },
            "pricingTier": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "The pricing tier of workspace."
              }
            },
            "deployDataLakeAccount": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Control Deployment of Data Lake Storage Account"
              }
            },
            "dataLakeAccountName": {
              "type": "string",
              "defaultValue": "[format('st{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "Data Lake Account Name"
              }
            },
            "dataLakeAccountSKU": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "Data Lake Storage Account SKU"
              }
            },
            "dataLakeBronzeZoneName": {
              "type": "string",
              "defaultValue": "raw",
              "metadata": {
                "description": "Data Lake Bronze Zone Container Name"
              }
            },
            "dataLakeSilverZoneName": {
              "type": "string",
              "defaultValue": "trusted",
              "metadata": {
                "description": "Data Lake Silver Zone Container Name"
              }
            },
            "dataLakeGoldZoneName": {
              "type": "string",
              "defaultValue": "curated",
              "metadata": {
                "description": "Data Lake Gold Zone Container Name"
              }
            },
            "dataLakeSandboxZoneName": {
              "type": "string",
              "defaultValue": "sandbox",
              "metadata": {
                "description": "Data Lake Sandbox Zone Container Name"
              }
            },
            "allowSharedKeyAccess": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Allow Shared Key Access"
              }
            }
          },
          "variables": {
            "privateContainerNames": [
              "[parameters('dataLakeBronzeZoneName')]",
              "[parameters('dataLakeSilverZoneName')]",
              "[parameters('dataLakeGoldZoneName')]",
              "[parameters('dataLakeSandboxZoneName')]"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Databricks/workspaces",
              "apiVersion": "2018-04-01",
              "name": "[parameters('databricksWorkspaceName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('pricingTier')]"
              },
              "properties": {
                "managedResourceGroupId": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('databricksManagedResourceGroupName'))]",
                "parameters": {
                  "enableNoPublicIp": {
                    "value": false
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('deployDataLakeAccount'), true())]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-02-01",
              "name": "[parameters('dataLakeAccountName')]",
              "location": "[parameters('location')]",
              "properties": {
                "isHnsEnabled": true,
                "accessTier": "Hot",
                "allowBlobPublicAccess": true,
                "supportsHttpsTrafficOnly": true,
                "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "bypass": "AzureServices",
                  "resourceAccessRules": [
                    {
                      "tenantId": "[subscription().tenantId]",
                      "resourceId": "[resourceId('Microsoft.Databricks/workspaces', parameters('databricksWorkspaceName'))]"
                    }
                  ]
                }
              },
              "kind": "StorageV2",
              "sku": {
                "name": "[parameters('dataLakeAccountSKU')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Databricks/workspaces', parameters('databricksWorkspaceName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('deployDataLakeAccount'), true())]",
              "copy": {
                "name": "r_dataLakePrivateContainer",
                "count": "[length(variables('privateContainerNames'))]"
              },
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/default/{1}', parameters('dataLakeAccountName'), variables('privateContainerNames')[copyIndex()])]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('dataLakeAccountName'))]"
              ]
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "m_microservices_01",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceInstance": {
            "value": "01"
          },
          "location": {
            "value": "[parameters('resourceLocation')]"
          },
          "vNetIPAddressPrefixes": {
            "value": "[parameters('vNetIPAddressPrefixesForFirstDeployment')]"
          },
          "subnetAksIpAddressPrefix": {
            "value": "[parameters('subnetAksIpAddressPrefixForFirstDeployment')]"
          },
          "subnetAppGwIpAddressPrefix": {
            "value": "[parameters('subnetAppGwIpAddressPrefixForFirstDeployment')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "4754783924999976762"
            }
          },
          "parameters": {
            "workloadIdentifier": {
              "type": "string",
              "defaultValue": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
              "metadata": {
                "description": "Workload Identifier"
              }
            },
            "resourceInstance": {
              "type": "string",
              "defaultValue": "001",
              "metadata": {
                "description": "Resource Instance"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of resources"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "defaultValue": "[format('cr{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "Container Registry Name"
              }
            },
            "useExistingContainerRegistry": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Create new Log Analytics Workspace "
              }
            },
            "containerRegistryResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Log Analytics Workspace Resource Group Name"
              }
            },
            "adminUserEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable Container Registry admin user"
              }
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "defaultValue": "[format('law{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "Log Analytics Workspace Name"
              }
            },
            "useExistingLogAnalyticsWorkspace": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Create new Log Analytics Workspace "
              }
            },
            "logAnalyticsWorkspaceResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Log Analytics Workspace Resource Group Name"
              }
            },
            "vNetName": {
              "type": "string",
              "defaultValue": "[format('vnet{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "Virtual Network Name"
              }
            },
            "vNetIPAddressPrefixes": {
              "type": "array",
              "defaultValue": [
                "192.168.0.0/16"
              ],
              "metadata": {
                "description": "Virtual Network IP Address Prefixes"
              }
            },
            "subnetAksName": {
              "type": "string",
              "defaultValue": "akssubnet",
              "metadata": {
                "description": "AKS Subnet Name"
              }
            },
            "subnetAppGwName": {
              "type": "string",
              "defaultValue": "appgwsubnet",
              "metadata": {
                "description": "App Gateway Subnet Name"
              }
            },
            "subnetAksIpAddressPrefix": {
              "type": "string",
              "defaultValue": "192.168.0.0/24",
              "metadata": {
                "description": "AKS Subnet IP Address Prefix"
              }
            },
            "subnetAppGwIpAddressPrefix": {
              "type": "string",
              "defaultValue": "192.168.1.0/24",
              "metadata": {
                "description": "App Gateway IP Address Prefix"
              }
            },
            "kubernetesServiceClusterName": {
              "type": "string",
              "defaultValue": "[format('aks{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "The name of the Managed Cluster resource"
              }
            },
            "dnsPrefix": {
              "type": "string",
              "defaultValue": "dns",
              "metadata": {
                "description": "DNS prefix to use with hosted Kubernetes API server FQDN"
              }
            },
            "publicIpAddressName": {
              "type": "string",
              "defaultValue": "[format('pubip{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "The name of the Public IP Address"
              }
            },
            "applicationGatewayName": {
              "type": "string",
              "defaultValue": "[format('appgw{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "The name of the Application Gateway"
              }
            }
          },
          "variables": {
            "azureRbacContributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
            "applicationGatewayId": "[resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName'))]"
          },
          "resources": [
            {
              "condition": "[equals(parameters('useExistingContainerRegistry'), false())]",
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2019-05-01",
              "name": "[parameters('containerRegistryName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Basic"
              },
              "properties": {
                "adminUserEnabled": "[parameters('adminUserEnabled')]"
              }
            },
            {
              "condition": "[equals(parameters('useExistingLogAnalyticsWorkspace'), false())]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-03-01-preview",
              "name": "[parameters('logAnalyticsWorkspaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "retentionInDays": 30,
                "sku": {
                  "name": "PerGB2018"
                },
                "workspaceCapping": {
                  "dailyQuotaGb": 1
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-11-01",
              "name": "[parameters('vNetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": "[parameters('vNetIPAddressPrefixes')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('vNetName'), parameters('subnetAksName'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetAksIpAddressPrefix')]",
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetAppGwName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('vNetName'), parameters('subnetAppGwName'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetAppGwIpAddressPrefix')]",
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName'))]"
              ]
            },
            {
              "type": "Microsoft.ContainerService/managedClusters",
              "apiVersion": "2022-04-02-preview",
              "name": "[parameters('kubernetesServiceClusterName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Basic",
                "tier": "Free"
              },
              "tags": {},
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "kubernetesVersion": "1.23.12",
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "agentPoolProfiles": [
                  {
                    "name": "agentpool",
                    "count": 2,
                    "vmSize": "Standard_B2s",
                    "osDiskSizeGB": 128,
                    "osDiskType": "Managed",
                    "kubeletDiskType": "OS",
                    "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetAksName'))]",
                    "maxPods": 110,
                    "type": "VirtualMachineScaleSets",
                    "maxCount": 2,
                    "minCount": 1,
                    "enableAutoScaling": true,
                    "orchestratorVersion": "1.22.6",
                    "enableNodePublicIP": false,
                    "mode": "System",
                    "osType": "Linux",
                    "osSKU": "Ubuntu",
                    "enableFIPS": false
                  }
                ],
                "servicePrincipalProfile": {
                  "clientId": "msi"
                },
                "apiServerAccessProfile": {
                  "enablePrivateCluster": false
                },
                "addonProfiles": {
                  "azureKeyvaultSecretsProvider": {
                    "enabled": false
                  },
                  "azurepolicy": {
                    "enabled": false
                  },
                  "httpApplicationRouting": {
                    "enabled": false
                  },
                  "ingressApplicationGateway": {
                    "enabled": true,
                    "config": {
                      "applicationGatewayId": "[variables('applicationGatewayId')]",
                      "effectiveApplicationGatewayId": "[variables('applicationGatewayId')]"
                    }
                  },
                  "omsAgent": {
                    "enabled": true,
                    "config": {
                      "logAnalyticsWorkspaceResourceID": "[if(parameters('useExistingLogAnalyticsWorkspace'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logAnalyticsWorkspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')))]"
                    }
                  }
                },
                "nodeResourceGroup": "[format('{0}-{1}-mngd', resourceGroup().name, parameters('resourceInstance'))]",
                "enableRBAC": true,
                "networkProfile": {
                  "networkPlugin": "azure",
                  "loadBalancerSku": "Standard",
                  "loadBalancerProfile": {
                    "managedOutboundIPs": {
                      "count": 1
                    },
                    "effectiveOutboundIPs": [
                      {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
                      }
                    ]
                  },
                  "serviceCidr": "10.0.0.0/16",
                  "dnsServiceIP": "10.0.0.10",
                  "dockerBridgeCidr": "172.17.0.1/16",
                  "outboundType": "loadBalancer"
                },
                "storageProfile": {
                  "diskCSIDriver": {
                    "enabled": true,
                    "version": "v1"
                  },
                  "fileCSIDriver": {
                    "enabled": true
                  },
                  "snapshotController": {
                    "enabled": true
                  }
                },
                "oidcIssuerProfile": {
                  "enabled": false
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetAksName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2020-11-01",
              "name": "[parameters('publicIpAddressName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4
              }
            },
            {
              "type": "Microsoft.Network/applicationGateways",
              "apiVersion": "2020-11-01",
              "name": "[parameters('applicationGatewayName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "Standard_v2",
                  "tier": "Standard_v2"
                },
                "gatewayIPConfigurations": [
                  {
                    "name": "appGatewayIpConfig",
                    "properties": {
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetAppGwName'))]"
                      }
                    }
                  }
                ],
                "frontendIPConfigurations": [
                  {
                    "name": "appGwPublicFrontendIp",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
                      }
                    }
                  }
                ],
                "frontendPorts": [
                  {
                    "name": "port_80",
                    "properties": {
                      "port": 80
                    }
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "defaultaddresspool",
                    "properties": {
                      "backendAddresses": []
                    }
                  }
                ],
                "backendHttpSettingsCollection": [
                  {
                    "name": "defaulthttpsetting",
                    "properties": {
                      "port": 80,
                      "protocol": "Http",
                      "cookieBasedAffinity": "Disabled",
                      "pickHostNameFromBackendAddress": false,
                      "requestTimeout": 30,
                      "probe": {
                        "id": "[format('{0}/probes/defaultprobe-Http', variables('applicationGatewayId'))]"
                      }
                    }
                  }
                ],
                "httpListeners": [
                  {
                    "name": "fl-e1903c8aa3446b7b3207aec6d6ecba8a",
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[format('{0}/frontendIPConfigurations/appGwPublicFrontendIp', variables('applicationGatewayId'))]"
                      },
                      "frontendPort": {
                        "id": "[format('{0}/frontendPorts/port_80', variables('applicationGatewayId'))]"
                      },
                      "protocol": "Http",
                      "hostNames": [],
                      "requireServerNameIndication": false
                    }
                  }
                ],
                "urlPathMaps": [],
                "requestRoutingRules": [
                  {
                    "name": "rr-e1903c8aa3446b7b3207aec6d6ecba8a",
                    "properties": {
                      "ruleType": "Basic",
                      "httpListener": {
                        "id": "[format('{0}/httpListeners/fl-e1903c8aa3446b7b3207aec6d6ecba8a', variables('applicationGatewayId'))]"
                      },
                      "backendAddressPool": {
                        "id": "[format('{0}/backendAddressPools/defaultaddresspool', variables('applicationGatewayId'))]"
                      },
                      "backendHttpSettings": {
                        "id": "[format('{0}/backendHttpSettingsCollection/defaulthttpsetting', variables('applicationGatewayId'))]"
                      }
                    }
                  }
                ],
                "probes": [
                  {
                    "name": "defaultprobe-Http",
                    "properties": {
                      "protocol": "Http",
                      "host": "localhost",
                      "path": "/",
                      "interval": 30,
                      "timeout": 30,
                      "unhealthyThreshold": 3,
                      "pickHostNameFromBackendHttpSettings": false,
                      "minServers": 0,
                      "match": {}
                    }
                  },
                  {
                    "name": "defaultprobe-Https",
                    "properties": {
                      "protocol": "Https",
                      "host": "localhost",
                      "path": "/",
                      "interval": 30,
                      "timeout": 30,
                      "unhealthyThreshold": 3,
                      "pickHostNameFromBackendHttpSettings": false,
                      "minServers": 0,
                      "match": {}
                    }
                  }
                ],
                "enableHttp2": false,
                "autoscaleConfiguration": {
                  "minCapacity": 0,
                  "maxCapacity": 3
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetAppGwName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('useExistingContainerRegistry'), false())]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-08-01-preview",
              "name": "[guid(parameters('kubernetesServiceClusterName'), parameters('containerRegistryName'), 'contributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureRbacContributorRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName')), '2022-04-02-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-08-01-preview",
              "name": "[guid(parameters('kubernetesServiceClusterName'), parameters('applicationGatewayName'), 'contributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureRbacContributorRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName')), '2022-04-02-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-08-01-preview",
              "name": "[guid(parameters('kubernetesServiceClusterName'), 'agic', 'contributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureRbacContributorRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName')), '2022-04-02-preview').addonProfiles.ingressApplicationGateway.identity.objectId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName'))]"
              ]
            }
          ],
          "outputs": {
            "controlPlaneFQDN": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName')), '2022-04-02-preview').fqdn]"
            },
            "containerRegistryName": {
              "type": "string",
              "value": "[parameters('containerRegistryName')]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[parameters('logAnalyticsWorkspaceName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "m_microservices_02",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceInstance": {
            "value": "02"
          },
          "location": {
            "value": "[parameters('resourceLocation')]"
          },
          "vNetIPAddressPrefixes": {
            "value": "[parameters('vNetIPAddressPrefixesForSecondDeployment')]"
          },
          "subnetAksIpAddressPrefix": {
            "value": "[parameters('subnetAksIpAddressPrefixForSecondDeployment')]"
          },
          "subnetAppGwIpAddressPrefix": {
            "value": "[parameters('subnetAppGwIpAddressPrefixForSecondDeployment')]"
          },
          "useExistingContainerRegistry": {
            "value": true
          },
          "useExistingLogAnalyticsWorkspace": {
            "value": true
          },
          "containerRegistryName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'm_microservices_01'), '2020-10-01').outputs.containerRegistryName.value]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'm_microservices_01'), '2020-10-01').outputs.logAnalyticsWorkspaceName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "4754783924999976762"
            }
          },
          "parameters": {
            "workloadIdentifier": {
              "type": "string",
              "defaultValue": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
              "metadata": {
                "description": "Workload Identifier"
              }
            },
            "resourceInstance": {
              "type": "string",
              "defaultValue": "001",
              "metadata": {
                "description": "Resource Instance"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of resources"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "defaultValue": "[format('cr{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "Container Registry Name"
              }
            },
            "useExistingContainerRegistry": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Create new Log Analytics Workspace "
              }
            },
            "containerRegistryResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Log Analytics Workspace Resource Group Name"
              }
            },
            "adminUserEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable Container Registry admin user"
              }
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "defaultValue": "[format('law{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "Log Analytics Workspace Name"
              }
            },
            "useExistingLogAnalyticsWorkspace": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Create new Log Analytics Workspace "
              }
            },
            "logAnalyticsWorkspaceResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Log Analytics Workspace Resource Group Name"
              }
            },
            "vNetName": {
              "type": "string",
              "defaultValue": "[format('vnet{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "Virtual Network Name"
              }
            },
            "vNetIPAddressPrefixes": {
              "type": "array",
              "defaultValue": [
                "192.168.0.0/16"
              ],
              "metadata": {
                "description": "Virtual Network IP Address Prefixes"
              }
            },
            "subnetAksName": {
              "type": "string",
              "defaultValue": "akssubnet",
              "metadata": {
                "description": "AKS Subnet Name"
              }
            },
            "subnetAppGwName": {
              "type": "string",
              "defaultValue": "appgwsubnet",
              "metadata": {
                "description": "App Gateway Subnet Name"
              }
            },
            "subnetAksIpAddressPrefix": {
              "type": "string",
              "defaultValue": "192.168.0.0/24",
              "metadata": {
                "description": "AKS Subnet IP Address Prefix"
              }
            },
            "subnetAppGwIpAddressPrefix": {
              "type": "string",
              "defaultValue": "192.168.1.0/24",
              "metadata": {
                "description": "App Gateway IP Address Prefix"
              }
            },
            "kubernetesServiceClusterName": {
              "type": "string",
              "defaultValue": "[format('aks{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "The name of the Managed Cluster resource"
              }
            },
            "dnsPrefix": {
              "type": "string",
              "defaultValue": "dns",
              "metadata": {
                "description": "DNS prefix to use with hosted Kubernetes API server FQDN"
              }
            },
            "publicIpAddressName": {
              "type": "string",
              "defaultValue": "[format('pubip{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "The name of the Public IP Address"
              }
            },
            "applicationGatewayName": {
              "type": "string",
              "defaultValue": "[format('appgw{0}{1}', parameters('workloadIdentifier'), parameters('resourceInstance'))]",
              "metadata": {
                "description": "The name of the Application Gateway"
              }
            }
          },
          "variables": {
            "azureRbacContributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
            "applicationGatewayId": "[resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName'))]"
          },
          "resources": [
            {
              "condition": "[equals(parameters('useExistingContainerRegistry'), false())]",
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2019-05-01",
              "name": "[parameters('containerRegistryName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Basic"
              },
              "properties": {
                "adminUserEnabled": "[parameters('adminUserEnabled')]"
              }
            },
            {
              "condition": "[equals(parameters('useExistingLogAnalyticsWorkspace'), false())]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-03-01-preview",
              "name": "[parameters('logAnalyticsWorkspaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "retentionInDays": 30,
                "sku": {
                  "name": "PerGB2018"
                },
                "workspaceCapping": {
                  "dailyQuotaGb": 1
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-11-01",
              "name": "[parameters('vNetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": "[parameters('vNetIPAddressPrefixes')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('vNetName'), parameters('subnetAksName'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetAksIpAddressPrefix')]",
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetAppGwName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('vNetName'), parameters('subnetAppGwName'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetAppGwIpAddressPrefix')]",
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName'))]"
              ]
            },
            {
              "type": "Microsoft.ContainerService/managedClusters",
              "apiVersion": "2022-04-02-preview",
              "name": "[parameters('kubernetesServiceClusterName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Basic",
                "tier": "Free"
              },
              "tags": {},
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "kubernetesVersion": "1.23.12",
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "agentPoolProfiles": [
                  {
                    "name": "agentpool",
                    "count": 2,
                    "vmSize": "Standard_B2s",
                    "osDiskSizeGB": 128,
                    "osDiskType": "Managed",
                    "kubeletDiskType": "OS",
                    "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetAksName'))]",
                    "maxPods": 110,
                    "type": "VirtualMachineScaleSets",
                    "maxCount": 2,
                    "minCount": 1,
                    "enableAutoScaling": true,
                    "orchestratorVersion": "1.22.6",
                    "enableNodePublicIP": false,
                    "mode": "System",
                    "osType": "Linux",
                    "osSKU": "Ubuntu",
                    "enableFIPS": false
                  }
                ],
                "servicePrincipalProfile": {
                  "clientId": "msi"
                },
                "apiServerAccessProfile": {
                  "enablePrivateCluster": false
                },
                "addonProfiles": {
                  "azureKeyvaultSecretsProvider": {
                    "enabled": false
                  },
                  "azurepolicy": {
                    "enabled": false
                  },
                  "httpApplicationRouting": {
                    "enabled": false
                  },
                  "ingressApplicationGateway": {
                    "enabled": true,
                    "config": {
                      "applicationGatewayId": "[variables('applicationGatewayId')]",
                      "effectiveApplicationGatewayId": "[variables('applicationGatewayId')]"
                    }
                  },
                  "omsAgent": {
                    "enabled": true,
                    "config": {
                      "logAnalyticsWorkspaceResourceID": "[if(parameters('useExistingLogAnalyticsWorkspace'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logAnalyticsWorkspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')))]"
                    }
                  }
                },
                "nodeResourceGroup": "[format('{0}-{1}-mngd', resourceGroup().name, parameters('resourceInstance'))]",
                "enableRBAC": true,
                "networkProfile": {
                  "networkPlugin": "azure",
                  "loadBalancerSku": "Standard",
                  "loadBalancerProfile": {
                    "managedOutboundIPs": {
                      "count": 1
                    },
                    "effectiveOutboundIPs": [
                      {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
                      }
                    ]
                  },
                  "serviceCidr": "10.0.0.0/16",
                  "dnsServiceIP": "10.0.0.10",
                  "dockerBridgeCidr": "172.17.0.1/16",
                  "outboundType": "loadBalancer"
                },
                "storageProfile": {
                  "diskCSIDriver": {
                    "enabled": true,
                    "version": "v1"
                  },
                  "fileCSIDriver": {
                    "enabled": true
                  },
                  "snapshotController": {
                    "enabled": true
                  }
                },
                "oidcIssuerProfile": {
                  "enabled": false
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetAksName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2020-11-01",
              "name": "[parameters('publicIpAddressName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4
              }
            },
            {
              "type": "Microsoft.Network/applicationGateways",
              "apiVersion": "2020-11-01",
              "name": "[parameters('applicationGatewayName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "Standard_v2",
                  "tier": "Standard_v2"
                },
                "gatewayIPConfigurations": [
                  {
                    "name": "appGatewayIpConfig",
                    "properties": {
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetAppGwName'))]"
                      }
                    }
                  }
                ],
                "frontendIPConfigurations": [
                  {
                    "name": "appGwPublicFrontendIp",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
                      }
                    }
                  }
                ],
                "frontendPorts": [
                  {
                    "name": "port_80",
                    "properties": {
                      "port": 80
                    }
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "defaultaddresspool",
                    "properties": {
                      "backendAddresses": []
                    }
                  }
                ],
                "backendHttpSettingsCollection": [
                  {
                    "name": "defaulthttpsetting",
                    "properties": {
                      "port": 80,
                      "protocol": "Http",
                      "cookieBasedAffinity": "Disabled",
                      "pickHostNameFromBackendAddress": false,
                      "requestTimeout": 30,
                      "probe": {
                        "id": "[format('{0}/probes/defaultprobe-Http', variables('applicationGatewayId'))]"
                      }
                    }
                  }
                ],
                "httpListeners": [
                  {
                    "name": "fl-e1903c8aa3446b7b3207aec6d6ecba8a",
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[format('{0}/frontendIPConfigurations/appGwPublicFrontendIp', variables('applicationGatewayId'))]"
                      },
                      "frontendPort": {
                        "id": "[format('{0}/frontendPorts/port_80', variables('applicationGatewayId'))]"
                      },
                      "protocol": "Http",
                      "hostNames": [],
                      "requireServerNameIndication": false
                    }
                  }
                ],
                "urlPathMaps": [],
                "requestRoutingRules": [
                  {
                    "name": "rr-e1903c8aa3446b7b3207aec6d6ecba8a",
                    "properties": {
                      "ruleType": "Basic",
                      "httpListener": {
                        "id": "[format('{0}/httpListeners/fl-e1903c8aa3446b7b3207aec6d6ecba8a', variables('applicationGatewayId'))]"
                      },
                      "backendAddressPool": {
                        "id": "[format('{0}/backendAddressPools/defaultaddresspool', variables('applicationGatewayId'))]"
                      },
                      "backendHttpSettings": {
                        "id": "[format('{0}/backendHttpSettingsCollection/defaulthttpsetting', variables('applicationGatewayId'))]"
                      }
                    }
                  }
                ],
                "probes": [
                  {
                    "name": "defaultprobe-Http",
                    "properties": {
                      "protocol": "Http",
                      "host": "localhost",
                      "path": "/",
                      "interval": 30,
                      "timeout": 30,
                      "unhealthyThreshold": 3,
                      "pickHostNameFromBackendHttpSettings": false,
                      "minServers": 0,
                      "match": {}
                    }
                  },
                  {
                    "name": "defaultprobe-Https",
                    "properties": {
                      "protocol": "Https",
                      "host": "localhost",
                      "path": "/",
                      "interval": 30,
                      "timeout": 30,
                      "unhealthyThreshold": 3,
                      "pickHostNameFromBackendHttpSettings": false,
                      "minServers": 0,
                      "match": {}
                    }
                  }
                ],
                "enableHttp2": false,
                "autoscaleConfiguration": {
                  "minCapacity": 0,
                  "maxCapacity": 3
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetAppGwName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('useExistingContainerRegistry'), false())]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-08-01-preview",
              "name": "[guid(parameters('kubernetesServiceClusterName'), parameters('containerRegistryName'), 'contributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureRbacContributorRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName')), '2022-04-02-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-08-01-preview",
              "name": "[guid(parameters('kubernetesServiceClusterName'), parameters('applicationGatewayName'), 'contributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureRbacContributorRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName')), '2022-04-02-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-08-01-preview",
              "name": "[guid(parameters('kubernetesServiceClusterName'), 'agic', 'contributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureRbacContributorRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName')), '2022-04-02-preview').addonProfiles.ingressApplicationGateway.identity.objectId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName'))]"
              ]
            }
          ],
          "outputs": {
            "controlPlaneFQDN": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('kubernetesServiceClusterName')), '2022-04-02-preview').fqdn]"
            },
            "containerRegistryName": {
              "type": "string",
              "value": "[parameters('containerRegistryName')]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[parameters('logAnalyticsWorkspaceName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'm_microservices_01')]"
      ]
    }
  ]
}